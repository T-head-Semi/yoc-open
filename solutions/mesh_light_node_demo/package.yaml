
## 第一部分： 基础信息
name: mesh_light_node_demo
version: v8.0.0                                    # <必选项> 组件版本号
description: YoC MESH SDK                           # <必选项> 建议至少20字以上
type: solution                                      # <必选项> 组件类型，为：solution, chip, board, common, sdk

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本
# sdk_chip:                                # <可选项> 该组件依赖sdk组件，合理的依赖才能保证组件能编译、使用
#   - sdk_chip_csky_dummy: v7.4.0
#   - sdk_chip_riscv_dummy: v7.4.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.4.0
#   - aos: v7.4.0
sdk_chip:
  - sdk_chip_d1: v8.0.0
depends:
  - sdk_chip_d1: v8.0.0
  - drv_light: v8.0.0
  - ble_mesh: v8.0.0
  - ota_module: v8.0.0

## 第三部分：板级信息
# hw_info:                                 # 对 solution、board、chip 三个字段的改进，统称为 hw_info 字段
#   cpu_id: cpu0
#   cpu_name: CK804EF
#   vendor_name: xuantie
#   chip_name: chip_pangu                  # <可选项> 指定芯片组件名,未设置时，使用depends中 chip 第一个组件
#   board_name: pangu_cpu0_evb             # <可选项> 指定开发板组件名，未设置时，使用depends中 board 第一个组件
#   ld_script: configs/gcc_eflash.ld       # <可选项> 连接时使用 LD 脚本，当选把未设置时，使用对应的 board 的 LD 脚本
#   flash_program: bin/flash_program.elf   # <可选项> 芯片全局烧写程序
#   toolchain_prefix: csky-abiv2-elf       # <可选项> 编译器前缀
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <可选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀

## solution component
# hw_info:
#   cpu_id: cpu0
#   board_name: pangu_cpu0_evb
#   cpu_name: CK805EF
#   vendor_name: xuantie
#   chip_name: 'chip_pangu'
#   ld_script: configs/gcc_eflash.ld.S
hw_info:
  cpu_id: ""
  cpu_name: ""
  vendor_name: ""
  chip_name: ""
  board_name: phy6220_evb
  ld_script: ""
  flash_program: ""
## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
mkflash_script: mkflash.sh
build_config:
  cflag: '-Os  -g'
  cxxflag: '-Os  -g'
  include:
    - app/include
    - app/src

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - "app/src/*.c"
  - "app/src/init/cli_cmd.c"
  - app/src/init/cli_triples.c ?<CONFIG_USE_CLI_TRIPLES>
  - "app/src/init/init.c"
  - "app/src/init/mesh_com_init.c"
  - "app/src/init/occ_auth.c"
  - "app/src/led/*.c"

## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
def_config:
# Kernel Config
  #CONFIG_IDLE_TASK_STACK_SIZE: 1096
  #CONFIG_SYS_CLK_48M: 0
# BLE HOST Config
  CONFIG_BT_L2CAP_RX_MTU: 131
  CONFIG_BT_L2CAP_TX_MTU: 131

# BLE MESH Config
  CONFIG_BT_MESH_PROV_TRANSMIT_COUNT: 2
  CONFIG_BT_MESH_ADV_BUF_COUNT: 10
  CONFIG_BT_MESH_RELAY: 1
  CONFIG_BT_MESH_PB_GATT: 1
  CONFIG_BT_MESH_GATT_PROXY: 1
  CONFIG_BT_MESH_MODEL_GROUP_COUNT: 8
  CONFIG_BT_MESH_USE_SIG_MODEL: 1
  CONFIG_BT_MESH_SIG_MODEL: 1
  CONFIG_BT_MESH_CFG_CLI: 1
  CONFIG_BT_MESH_HEALTH_CLI: 1
  CONFIG_BT_MESH_MODEL_GEN_ONOFF_SRV: 1
  CONFIG_BT_MESH_MODEL_GEN_LEVEL_SRV: 1
  CONFIG_BT_MESH_MODEL_LIGHT_CTL_SRV: 1
  CONFIG_BT_MESH_MODEL_LIGHT_LIGHTNESS_SRV: 1
  CONFIG_BT_MESH_MODEL_VENDOR_SRV: 1
  CONFIG_BT_MESH_NODE_REPEAT_RESET: 1
  CONFIG_BT_MESH_HB_AUTO_PUB: 1
  #CONFIG_BT_ADV_SCAN_SCHEDULE_IN_HOST: 1
# OTA Config
  CONFIG_OTA_CLIENT: 1
  CONFIG_APP_VERSION: v1.0.0
  CONFIG_OTA_CLIENT_TRANS_GATT: 1
  CONFIG_OTA_CLIENT_PROCTOCOL_AIS: 1
# Smartliving config
  CONFIG_GW_SMARTLIVING_SUPPORT: 0
  CONFIG_USE_CLI_TRIPLES: 0
# OCC AUTH
  CONFIG_OCC_AUTH: 0

# Board config
  CONFIG_BOARD_BT: 1
  CONFIG_BOARD_LED: 1

# Debug config
  CONFIG_DEBUG: 1
  #MESH_DEBUG_PROV: 1
  MESH_DEBUG_RX: 0
  MESH_DEBUG_TX: 0
  #CONFIG_BT_DEBUG_LOG: 1

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
