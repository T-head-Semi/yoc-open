## 第一部分： 基础信息
name: flash_doorbell
version: v7.9.1
description: yoc doorbell solution
type: solution
## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
sdk_chip:
  - sdk_chip_cv181xh_bga: v7.9.1
depends:
  - sdk_chip_cv181xh_bga: v7.9.1
  - fota: v7.9.1
  - httpclient: v7.9.1
  - transport: v7.9.1
  - wifi_provisioning: v7.9.1
  - lvgl: v7.9.1
  - tmedia_core: v7.9.1
  - tmedia_backend_seno: v7.9.1
  - tmedia_backend_cvitek: v7.9.1
  - cx_lite_base: v7.9.1
  - cx_lite_record: v7.9.1
  - cx_lite_linkvisual: v7.9.1
  - cx_lite_faceai: v7.9.1
  - cvi_sensor: v7.9.1
  - cvi_platform: v7.9.1
  - excore: v7.9.1

## 第三部分：板级信息
# hw_info:                                 # 对 solution、board、chip 三个字段的改进，统称为 hw_info 字段
#   cpu_id: cpu0
#   cpu_name: CK804EF
#   vendor_name: xuantie
#   chip_name: chip_pangu                  # <可选项> 指定芯片组件名,未设置时，使用depends中 chip 第一个组件
#   board_name: pangu_cpu0_evb             # <可选项> 指定开发板组件名，未设置时，使用depends中 board 第一个组件
#   ld_script: configs/gcc_eflash.ld       # <可选项> 连接时使用 LD 脚本，当选把未设置时，使用对应的 board 的 LD 脚本
#   flash_program: bin/flash_program.elf   # <可选项> 芯片全局烧写程序
#   toolchain_prefix: csky-abiv2-elf       # <可选项> 编译器前缀
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <可选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
## solution component
# hw_info:
#   cpu_id: cpu0
#   board_name: pangu_cpu0_evb
#   cpu_name: CK805EF
#   vendor_name: xuantie
#   chip_name: 'chip_pangu'
#   ld_script: configs/gcc_eflash.ld.S
## board component
# hw_info:
#   chip_name: chip_pangu
#   ld_script: configs/gcc_eflash.ld
## chip component (单处理器)
# hw_info:
#   cpu_name: CK804EF
#   ld_script: configs/gcc_eflash.ld
#   toolchain_prefix: csky-abiv2-elf
#   flash_program: bin/flash_program.elf
## chip component(多处理器)
# hw_info:
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
hw_info:
  cpu_id: ""
  cpu_name: ""
  vendor_name: ""
  chip_name: ""
#  board_name: cr182x_evb 
  board_name: cv181xh_huashanpi_evb
  ld_script: ""

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  include:
    - app/include
    - app/src
    # - test/tpu 
    # - test/vi 
    # - test/gdc 
    # - test/security 
  internal_include: 
  cflag: -Os
  cxxflag: -Os
  asmflag: ""
  define: 
  libs: 
    - cvi_mw_audio
  libpath: 
    - libs
  ldflag: -Wl,-zmax-page-size=1024 -Wl,-Map=yoc.map

mkflash_script: mkflash.sh

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - app/src/*.c
  - app/src/*.cpp
  - app/src/sys/*.c
  - app/src/fota/*.c
  - app/src/sys/*.c
  - app/src/wifi/*.c
  - app/src/wifi/multi_ssid/*.c
  - app/src/wifi/wifi_prov/*.c
  - app/src/event_mgr/*.c
  # - test/tpu/*.c
  # - test/tpu_sdk/*.cpp
  # - test/vi/*.c 
  # - test/vpss/*.c 
  # - test/venc/*.c 
  # - test/vdec/*.c 
  # - test/gdc/*.c 
  # - test/vo/*.c 
  # - test/rgn/*.c 
  # - test/dma/*.c 
  # - test/sys/*.c 
  # - test/audio/*.c 
  # - test/flash/*.c 
  # - test/partition/*.c 
  # - test/security/*.c 
  # - test/efuse/*.c 
  # - test/media_venc/*.c 
  # - test/wifi/fnlink/*.c 
  # - test/pwm/*.c 
  # - test/timer/*.c 
  # - test/wdt/*.c 
  # - test/cviai/*.c
  # - test/adc/*.c 
  # - test/disk_sd/*.c 
  # - test/gpio/*.c 
  # - test/i2c_tool/*.c 
  # - test/pinmux/*.c 
  # - test/ae/*.c
  # - test/ts_format_test.cpp
  # - test/video_parser_test.cpp

## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
def_config:
  CONFIG_RISCV_SMODE: 1
  ARCH_MARS: 1
  AOS_COMP_CLI: 1
  CONFIG_DEBUG: 1
  CONFIG_DEBUG_MM: 1
  CONFIG_SOFTWDT: 1
  CONFIG_SOFTWDT_TASK_STACK_SIZE: 2048
  CONFIG_APP_TEST: 0
  CONFIG_BOARD_CV: 1
  CONFIG_KV_ENABLE_CACHE: 1
## Demo APP Func config
  CONFIG_APP_RTSP_SUPPORT: 0
  CONFIG_APP_GUI_SUPPORT: 0
#  UART_MODE_SYNC: 1
  # CONFIG_SD_FATFS_MOUNTPOINT: "/mnt/sd"
  CLI_CONFIG_STACK_SIZE : 8192
  #ULOG_CONFIG_POP_FS: 1
  ULOG_CONFIG_ASYNC: 1              # ulog异步配置项，1表示开启异步打印，0表示同步打印
  ULOG_CONFIG_DEFAULT_DIR_ASYNC: 1  # ulog异步配置项，1表示开启异步打印，0表示同步打印
  ULOG_CONFIG_SYNC_LOG_DETAILS: 1
  ULOG_CONFIG_ASYNC_BUF_SIZE: 8192
  ULOG_CONFIG_LOG_SIZE: 512
#   CONFIG_SUPPORT_NORFLASH: 1

#   CONFIG_PANEL_HX8394: 0
#   CONFIG_PANEL_ILI9488: 1

  CONFIG_FACEAI_BINOCULAR: 0

  # CONFIG_VENC_TEST_CHN: 2
  # CONFIG_PQTOOL_SUPPORT: 1
  # CONFIG_PQBIN_USE_JSON: 0

  CONFIG_SENSOR_GCORE_GC2053: 1
  CONFIG_SENSOR_GCORE_GC2053_1L: 1
  CONFIG_SENSOR_GCORE_GC2093: 1

  CONFIG_SNS0_TYPE: 6
  CONFIG_SNS1_TYPE: 8

## FOTA
  APP_FOTA_EN: 1
  CONFIG_FOTA_USE_HTTPC: 1
  CONFIG_IR_GUI_EN: 1
  CONFIG_TMEDIA_CVI_LOG: 1
  CONFIG_TMEDIA_ALGO_LOG: 1 # 打开FaceAI调试日志
  # CONFIF_NETWORK_PRE: 1
  # CONFIG_FACEAI_IMAGE_DUMP: 1  # 将FaceAI图片dump功能设置为默认开

  # security BEGIN
  CONFIG_SYSTEM_SECURE: y
  CONFIG_SEC_BASE64_SW: y
  CONFIG_SEC_CRYPTO_RSA_SW: y
  CONFIG_SEC_CRYPTO_AES_SW: y
  CONFIG_TB_KP: 1
  CONFIG_KEY_MGR_KP_PROTECT: 1
  CONFIG_KEY_FROM_APP: 1              # develop need disable
  CONFIG_KEY_MGR_KP_PROTECT_OPT: 1    # develop need disable
  # security END

  CONFIG_BOARD_AUDIO: 1

  CONFIG_BOARD_DISPLAY: 1
  CONFIG_PANEL_HX8394: 0
  CONFIG_PANEL_ILI9488: 0
  CONFIG_PANEL_ST7701S: 1
  CONFIG_DISPLAY_TOUCHPAD_DISABLED: 1

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相当路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径
## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相当路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
