
## 第一部分： 基础信息
name: smart_speaker_demo                            # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: v7.4.3                                     # <必选项> 组件版本号
description: 智能音箱例程                           # <必选项> 建议至少20字以上
type: solution                                      # <必选项> 组件类型，为：solution, chip, board, common, sdk
keywords:                                           # <可选项> 标签，会影响到组件被搜索的效果，合理的标签很重要
  - sc5654
homepage: https://www.xrvm.cn
author: feimi                                       # <可选项> 原作者信息
license: Apache license v2.0                        # <可选项> 源代码的许可证，要确保所有代码、文件的许可证不冲突。如：MIT，Apache license v2.0，BSD

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# sdk_chip:                                # <可选项> 该组件依赖sdk组件，合理的依赖才能保证组件能编译、使用
#   - sdk_chip_csky_dummy: v7.4.3
#   - sdk_chip_riscv_dummy: v7.4.3
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
depends:
  - sdk_chip_sc5654: v7.4.3
  - sys_voice: v7.4.3
  - clock_alarm: v7.4.3
  - drv_leds: v7.4.3
  - fatfs: v7.4.3
  - fct: v7.4.3
  - kv: v7.4.3
  - littlefs: v7.4.3
  - ntp: v7.4.3
  - smartliving: v7.4.3
  - transport: v7.4.3
  - wifi_provisioning: v7.4.3
  - voice_mit: v7.4.3
  - yoc_sc5654: v7.4.3

## 第三部分：板级信息
# hw_info:                                 # 对 solution、board、chip 三个字段的改进，统称为 hw_info 字段
#   cpu_id: cpu0
#   cpu_name: CK804EF
#   vendor_name: xuantie
#   chip_name: chip_pangu                  # <可选项> 指定芯片组件名,未设置时，使用depends中 chip 第一个组件
#   ld_script: configs/gcc_eflash.ld       # <可选项> 连接时使用 LD 脚本，当选把未设置时，使用对应的 board 的 LD 脚本
#   flash_program: bin/flash_program.elf   # <可选项> 芯片全局烧写程序
#   toolchain_prefix: csky-abiv2-elf       # <可选项> 编译器前缀
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <可选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀

## solution component
# hw_info:
#   cpu_id: cpu0
#   cpu_name: CK805EF
#   vendor_name: xuantie
#   chip_name: 'chip_pangu'
#   ld_script: configs/gcc_eflash.ld.S
hw_info:
  board_name: cb5654
  ld_script: gcc_flash.ld

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  cflag: >
    -Os  -g  -Wall  -ffunction-sections -fdata-sections -mhard-float
    -Wl,-zmax-page-size=1024 -Wno-address -Wno-unused-but-set-variable
    -Wno-main -Wno-unused-function
  cxxflag: >
    -Os  -g  -Wall  -ffunction-sections -fdata-sections -mhard-float
    -Wl,-zmax-page-size=1024 -Wno-address -Wno-unused-but-set-variable
    -Wno-main -Wno-unused-function
  ldflag: '-Wl,-zmax-page-size=1024 -mhard-float -Wl,-ckmap="yoc.map"'
  include:
    - app/include
    - app/src
    - app/src/audio
    - app/src/aui_cloud
    - app/src/wifi_prov_ack
    - app/src/led
  libs:
    - m
    - resample

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - "app/src/*.c"
  - "app/src/audio/*.c"
  - "app/src/vad/*.c"
  - "app/src/aui_cloud/aliyunnls/*.c"
  - "app/src/wifi_prov_ack/*.c"
  - "app/src/led/*.c"
  - "app/src/voice_debug/t-head/*.c ? <CONFIG_THEAD_DSP>"
  - "app/src/voice_debug/mit/*.c ? <CONFIG_MIT_DSP>"
  - "app/src/voice_debug/huwen/*.c ? <CONFIG_HUWEN_DSP>"
  - "app/src/fct/mit/*.c ? <BOARD_MIT_V2>"
  - "app/src/fct/org/*.c ? <BOARD_CB5654>"

## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
def_config:
  CONFIG_CLI: 1
  CONFIG_DEBUG: 1
  CONFIG_KERNEL_TIMER_MSG_NUM: 30
  CONFIG_KERNEL_TIMER_STACK_SIZE: 2048
  CONFIG_KV_SMART: 1
  CONFIG_PARAM_NOT_CHECK: 1
  CONFIG_SOFTWDT: 1
  CONFIG_TCPIP: 1
  CONFIG_USING_TLS: 1
  CONFIG_RESAMPLER_SILAN: 1
  CONFIG_RESAMPLER_SPEEX: 0
  CONFIG_RESAMPLER_IPC: 0
  CONFIG_AEFXER_SONA: 0
  CONFIG_AEFXER_IPC: 0
  CONFIG_DECODER_PCM: 1
  CONFIG_DECODER_PVMP3: 1
  CONFIG_DECODER_FLAC: 0
  CONFIG_DECODER_ADPCM_MS: 0
  CONFIG_DECODER_AMRNB: 0
  CONFIG_DECODER_AMRWB: 0
  CONFIG_DECODER_IPC: 0

# CONFIG_WIFI_SMARTLIVING: 1               #飞燕配网(配置若关闭，则默认手机热点网页配网)

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
