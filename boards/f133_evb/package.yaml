
## 第一部分： 基础信息
name: f133_evb                                # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: v7.9.1                                    # <必选项> 组件版本号
description: f133 panel board configure             # <必选项> 建议至少20字以上
type: board                                         # <必选项> 组件类型，为：solution, chip, board, common, sdk
license: Apache license v2.0                        # <可选项> 源代码的许可证，要确保所有代码、文件的许可证不冲突。如：MIT，Apache license v2.0，BSD

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本
# sdk_chip:                                # <可选项> 该组件依赖sdk组件，合理的依赖才能保证组件能编译、使用
#   - sdk_chip_csky_dummy: v7.4.0
#   - sdk_chip_riscv_dummy: v7.4.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.4.0
#   - aos: v7.4.0

## 第三部分：板级信息
# hw_info:                                 # 对 solution、board、chip 三个字段的改进，统称为 hw_info 字段
#   cpu_id: cpu0
#   cpu_name: CK804EF
#   vendor_name: xuantie
#   chip_name: chip_pangu                  # <可选项> 指定芯片组件名,未设置时，使用depends中 chip 第一个组件
#   board_name: pangu_cpu0_evb             # <可选项> 指定开发板组件名，未设置时，使用depends中 board 第一个组件
#   ld_script: configs/gcc_eflash.ld       # <可选项> 连接时使用 LD 脚本，当选把未设置时，使用对应的 board 的 LD 脚本
#   flash_program: bin/flash_program.elf   # <可选项> 芯片全局烧写程序
#   toolchain_prefix: csky-abiv2-elf       # <可选项> 编译器前缀
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <可选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀

## board component
# hw_info:
#   chip_name: chip_pangu
#   ld_script: configs/gcc_eflash.ld
hw_info:
  cpu_id: cpu0
  chip_name: chip_d1

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  cflag: >
        -c -g -Os -ffunction-sections -fdata-sections -Wall -fno-common -fno-asynchronous-unwind-tables
  asmflag: -c -g -ffunction-sections -fdata-sections -Wall
  ldflag: -Wl,--gc-sections -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys -nostartfiles --specs=nosys.specs -fno-asynchronous-unwind-tables
  cxxflag: >
        -D_GLIBCXX_HAS_GTHREADS
        -std=gnu++11 -fno-common -fno-exceptions -ffunction-sections -fdata-sections -fomit-frame-pointer -fpermissive -g -Os
        -fno-asynchronous-unwind-tables
  include:
    - include
    - src

  prebuild_script: "script/pre_build.sh"
  postbuild_script: "script/aft_build.sh"

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - src/*.c
  - src/audio/*.c ? <CONFIG_BOARD_AUDIO>
  - src/button/*.c
  - src/display/*.c ? <CONFIG_BOARD_DISPLAY>
  - "src/adc/board_adc.c"
  - "src/audio/board_audio.c"
  - "src/bt/board_bt.c"
  - "src/button/board_button.c"
  - "src/gpio/board_gpio.c"
  - "src/led/board_led.c"
  - "src/pwm/board_pwm.c"
  - "src/uart/board_uart.c"
  - "src/wifi/board_wifi.c"
  - "src/vendor/*.c"
  - "src/flash/*.c"

## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
def_config:
  CONFIG_BOARD_F133_EVB: 1
  CONFIG_SYSTICK_HZ: 100
  WITH_LWIP: 1
  CONFIG_KERNEL_WORKQUEUE: 1
  CLI_CONFIG_STACK_SIZE: 8192
  CONFIG_LFS_BLOCK_CYCLES: 500
  CONFIG_LFS_MOUNTPOINT: "/"
  CONFIG_AEFXER_SONA: 0
  CONFIG_KERNEL_LWIP_HOOK: 1
  CONFIG_USING_TLS: 1
  CONFIG_KV_SMART: y
  POSIX_DEVICE_IO_NEED: 1
  CONFIG_CHIP_D1: 1
  FD_SETSIZE: 128
  CONFIG_USERVICE_EVENT_TASK_STACK_SIZE: 8192
  SYSINFO_DEVICE_NAME: "d1_dockpro_evb"
  CONFIG_OTA_AB: 0
  CONFIG_AOS_AUDIO_PCM: y
  CONFIG_PARITION_NO_VERIFY: 0
  CONFIG_NOT_SUPORRT_SASC: 1
  CONFIG_TB_KP: 1
  CONFIG_KP_BUFFER_LEN: 4096
  CONFIG_KEY_MGR_KP_PROTECT: 1
  CONFIG_IMG_AUTHENTICITY_NOT_CHECK: 0
  CONFIG_SEC_CRYPTO_AES_SW: 1
  CONFIG_SEC_CRYPTO_SHA_SW: 1
  CONFIG_SEC_CRYPTO_RSA_SW: 1
  CONFIG_SEC_CRYPTO_RNG_SW: 1
  HAVE_MBEDTLS_USER_CONFIG: 1
  #app define
  CONFIG_GW_MGMT_EVENT_PROCESS_TASK: 16384 #16K
  CONFIG_BLUETOOTH_WORK_QUEUE_STACK_SIZE: 10240 #10K 6144
  CONFIG_BT_AUTO_DATA_LEN_UPDATE: 1
  CONFIG_BT_CENTRAL: 1
  CONFIG_BT_CONN_TX_MAX: 3
  CONFIG_BT_DEBUG_LOG: 1
  CONFIG_BT_H5_RECV_DATA_LIMIT: 20
  CONFIG_BT_HCI_CMD_COUNT: 12
  CONFIG_BT_L2CAP_RX_MTU: 247
  CONFIG_BT_L2CAP_TX_BUF_COUNT: 8
  CONFIG_BT_L2CAP_TX_MTU: 247
  CONFIG_BT_PERIPHERAL: 1
  CONFIG_BT_RX_BUF_COUNT: 4
  CONFIG_BT_RX_BUF_LEN: 512
  CONFIG_BT_RX_STACK_SIZE: 12288 #12K 8192
  CONFIG_BT_ADV_STACK_SIZE: 8192
  CONFIG_BT_SHELL: 1
  CONFIG_BT_SMP: 1
  CONFIG_BT_WHITELIST: 1
  CONFIG_BT_WORK_INDEPENDENCE: 1
  CONFIG_BT_TINYCRYPT_ECC: 1
  CONFIG_BT_MESH_TX_SDU_MAX: 512
  CONFIG_BT_MESH_SCAN_INTERVAL_MS: 50
  CONFIG_BT_MESH_SCAN_WINDOW_MS: 25
  CONFIG_BT_MESH_FAST_ADV: 20
  CONFIG_BT_HCI_ECC_STACK_SIZE: 4096
  CONFIG_BT_BREDR: 1
  CONFIG_BT_HFP_HF: 0
  CONFIG_BT_HFP: 0  
  CONFIG_BT_HFP_AUDIO_I2S: 0
  CONFIG_BT_A2DP: 1
  CONFIG_BT_DRV_NO_ONESHOT: 1
  CONFIG_BT_ADV_SCAN_SCHEDULE_IN_HOST: 1
  CONFIG_HAL_UART_RINGBUF_LEN: 8192
  CONFIG_BT_A2DP_AUDIO_OUTPUT_INSIDE: 1
  CONFIG_BT_MAX_PAIRED: 5
  CONFIG_FOTA_BUFFER_SIZE: 16384
  # filesystem
  CONFIG_FS_LFS: y

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
export:
  - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
    source:                                # 安装源列表
      - "bootimgs/boot"
      - "bootimgs/boot0"
      - "configs/config.yaml"
