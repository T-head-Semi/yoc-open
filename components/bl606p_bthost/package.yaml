## 第一部分： 基础信息
name: bl606p_bthost                                  # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: v7.9.0                                     # <必选项> 组件版本号
description: bluetooth host source code        # <必选项> 建议至少20字以上
type: common                                          # <必选项> 组件类型，为：solution, chip, board, common

tag: 核心模块                                       # <可选项> 组件分类，缺省值： ''
keywords:                                           # <可选项> 标签，会影响到组件被搜索的效果，合理的标签很重要
  - chip
license: Apache license v2.0                        # <可选项> 源代码的许可证，要确保所有代码、文件的许可证不冲突。如：MIT，Apache license v2.0，BSD

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本
# sdk_chip:                                # <可选项> 该组件依赖sdk组件，合理的依赖才能保证组件能编译、使用
#   - sdk_chip_csky_dummy: v7.4.0
#   - sdk_chip_riscv_dummy: v7.4.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.4.0
#   - aos: v7.4.0

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
#   prebuild_script: ''                    # 开始编译前需要执行的脚本文件(相对路径)
#   postbuild_script: ''                   # 编译完成之后需要执行的脚本文件(相对路径)
build_config:
  cflag: >
    -Wno-unused-variable
    -Wno-unused-but-set-variable
    -march=rv32imafc -mabi=ilp32f -g -Os
    -nostdlib -Wpointer-arith -Wundef -Wall -Wl,-EL -ffunction-sections
    -fdata-sections -fno-inline-functions -fno-builtin -fno-strict-aliasing
    -fno-strength-reduce -fno-omit-frame-pointer -std=gnu11
    -DCFG_BLE_ENABLE
    -DBFLB_BLE
    -DCONFIG_BT_CONN=2
    -DCONFIG_BLE_TX_BUFF_DATA=2
    -DCFG_BLE_TX_BUFF_DATA=2
    -DCONFIG_MAX_SCO=2
    -DCONFIG_BT_SMP
    -DCONFIG_BT_SIGNING
    -DCONFIG_BT_ALLROLES=1
    -DCONFIG_BT_CENTRAL=1
    -DCONFIG_BT_OBSERVER=1
    -DCONFIG_BT_PERIPHERAL=1
    -DCONFIG_BT_BROADCASTER=1
    -DCONFIG_BT_STACK_CLI=1
    -DCONFIG_BT_GATT_CLIENT=1
    -DCONFIG_BT_ECC
    -DCONFIG_BT_BREDR=1
    -DCONFIG_BT_A2DP=1
    -DCONFIG_BT_AVRCP=1
    -DCONFIG_BT_HFP=0
    -DCONFIG_BT_L2CAP_DYNAMIC_CHANNEL
    -DCONFIG_BT_GATT_DYNAMIC_DB
    -DSBC_DEC_INCLUDED
    -DSBC_ENC_INCLUDED
    -DCONFIG_BT_STACK_CLI
    -DCONFIG_BLE_TP_SERVER

  include:
  - src/common
  - src/port
  - src/port/include
  - src/common/include
  - src/include/bluetooth
  - src/include/drivers/bluetooth
  - src/host
  - src/sbc/dec #sbc codec
  - src/sbc/enc
  - src/ble_inc
  
  internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
  - src/ble_inc
  - src/common/include/misc
  - src/common/include/zephyr
  - src/common/include/toolchain
  - src/common/tinycrypt/include/tinycrypt
  - src/hci_onchip
  - src/bl_hci_wrapper
  - src/host
  - src/cli_cmds
  - src/services

source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
  - src/port/bl_port.c
  - src/common/atomic_c.c
  - src/common/buf.c
  - src/common/log.c
  - src/common/poll.c
  - src/common/rpa.c
  - src/common/work_q.c
  - src/common/utils.c
  - src/common/dec.c
  - src/common/dummy.c
  - src/common/tinycrypt/source/aes_decrypt.c
  - src/common/tinycrypt/source/aes_encrypt.c
  - src/common/tinycrypt/source/cbc_mode.c
  - src/common/tinycrypt/source/ccm_mode.c
  - src/common/tinycrypt/source/cmac_mode.c
  - src/common/tinycrypt/source/ctr_mode.c
  - src/common/tinycrypt/source/ctr_prng.c
  - "src/common/tinycrypt/source/ecc.c ? <CONFIG_TINY_CRYPTO_ECC_SW>"
  - "src/common/tinycrypt/source/ecc_dh.c ? <CONFIG_TINY_CRYPTO_ECC_SW>"
  - "src/common/tinycrypt/source/ecc_dsa.c ? <CONFIG_TINY_CRYPTO_ECC_SW>"
  - "src/common/tinycrypt/source/ecc_platform_specific.c ? <CONFIG_TINY_CRYPTO_ECC_SW>"
  - src/common/tinycrypt/source/hmac.c
  - src/common/tinycrypt/source/hmac_prng.c
  - src/common/tinycrypt/source/sha256.c
  - src/common/tinycrypt/source/utils.c
  - src/bl_hci_wrapper/bl_hci_wrapper.c
  - src/hci_onchip/hci_driver.c
  - src/host/att.c
  - src/host/conn.c
  - src/host/crypto.c
  - src/host/gatt.c
  - src/host/hci_core.c
  - "src/host/hci_ecc.c ? <CONFIG_TINY_CRYPTO_ECC_SW>"
  - src/host/l2cap.c
  - src/host/uuid.c
  - src/host/smp.c #CONFIG_DISABLE_BT_SMP
  - src/host/keys.c
  - src/host/keys_br.c #bredr_stack_srcs
  - src/host/l2cap_br.c
  - src/sbc/dec/alloc.c #sbc codec
  - src/sbc/dec/bitalloc.c
  - src/sbc/dec/bitalloc-sbc.c
  - src/sbc/dec/bitstream-decode.c
  - src/sbc/dec/decoder-oina.c
  - src/sbc/dec/decoder-private.c
  - src/sbc/dec/decoder-sbc.c
  - src/sbc/dec/dequant.c
  - src/sbc/dec/framing.c
  - src/sbc/dec/framing-sbc.c
  - src/sbc/dec/oi_codec_version.c
  - src/sbc/dec/synthesis-8-generated.c
  - src/sbc/dec/synthesis-dct8.c
  - src/sbc/dec/synthesis-sbc.c
  - src/sbc/enc/sbc_analysis.c
  - src/sbc/enc/sbc_dct.c
  - src/sbc/enc/sbc_dct_coeffs.c
  - src/sbc/enc/sbc_enc_bit_alloc_mono.c
  - src/sbc/enc/sbc_enc_bit_alloc_ste.c
  - src/sbc/enc/sbc_enc_coeffs.c
  - src/sbc/enc/sbc_encoder.c
  - src/sbc/enc/sbc_packing.c
  - src/cli_cmds/bredr_cli_cmds.c
  - src/cli_cmds/ble_cli_cmds.c
  - src/services/ble_tp_svc.c
#  - src/host/sdp.c #btprofile component
#  - src/host/a2dp.c
#  - src/host/avdtp.c
#  - src/host/avrcp.c
#  - src/host/avctp.c
#  - src/host/hfp_hf.c
#  - src/host/rfcomm.c
#  - src/host/at.c
#  - src/cli_cmds/ble_cli_cmds.c #CONFIG_BT_STACK_CLI
#  - src/cli_cmds/bredr_cli_cmds.c
#  - src/cli_cmds/pts_cli_cmds.c
#  - src/services/ble_tp_svc.c #CONFIG_BLE_TP_SERVER
#  - src/host/bl_host_assist.c #CONFIG_BT_RESET
#  - src/host/iso.c
  
def_config:
  BFLB_BLE: 1
  CFG_CON: 1

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
